# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (game/mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from lesson_006.mastermind_engine import start_game, number_from_user_is_ok, check_for_bulls_and_cows, is_end_game, \
    user_want_exit
from termcolor import cprint
from datetime import datetime

begin_again = 'Да'
list_for_begin = ['Y', 'Yes', 'yes', 'Да', 'да', 'Ещё', 'ещё', 'Еще', 'еще', 'Давай', 'давай', 'Го', 'го']
list_for_end = ['Сдаюсь', 'сдаюсь', 'Хватит', 'хватит', 'Все', 'все', 'Всё', 'всё', 'Выход', 'выход',
                'Exit', 'exit', 'Я так больше не могу', 'ААААААА']
while begin_again in list_for_begin:

    cprint(start_game(), color='blue', attrs=['bold'])
    counter = 0
    time_start = datetime.now()
    while True:
        input_number = input('>>> ')
        if input_number in list_for_end:
            cprint('Спасибо за игру! Число: ' + str(user_want_exit()), color='blue')
            break
        elif number_from_user_is_ok(input_number):
            result = check_for_bulls_and_cows(input_number)
            cprint('Быков – ' + str(result['bulls']) + ', коров – ' +
                   str(result['cows']), color='blue')
            counter += 1
            cprint('Это была попытка № ' + str(counter), color='blue')
            if is_end_game():
                cprint('И вы угадали!', color='blue')
                break
        else:
            cprint('Неверный формат! 4 цифры, первая – не ноль', color='red')
    cprint('Время игры составило: ' + str(datetime.now() - time_start), color='blue')
    begin_again = input('Запустить новую игру? ')

else:
    cprint('До свидания!', color='blue', attrs=['bold'])

# Зачет
